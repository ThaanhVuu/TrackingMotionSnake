from ultralytics import YOLO
from tkinter import Tk, filedialog
from PIL import Image
from moviepy.editor import VideoFileClip
import os

import ultralytics.trackers.byte_tracker as bt

# ‚úÖ V√° tri·ªát ƒë·ªÉ l·ªói thi·∫øu fuse_score trong ByteTrack
orig_update = bt.BYTETracker.update

def patched_update(self, *args, **kwargs):
    # ƒê·∫£m b·∫£o self.args t·ªìn t·∫°i
    if not hasattr(self, "args") or self.args is None:
        from types import SimpleNamespace
        self.args = SimpleNamespace()
    # ƒê·∫£m b·∫£o c√≥ thu·ªôc t√≠nh fuse_score
    if not hasattr(self.args, "fuse_score"):
        self.args.fuse_score = True
    return orig_update(self, *args, **kwargs)

bt.BYTETracker.update = patched_update
print("‚úÖ ByteTrack fuse_score hotfix (instance-level) applied!")

# ·∫®n c·ª≠a s·ªï ch√≠nh Tkinter
Tk().withdraw()

# M·ªü c·ª≠a s·ªï ch·ªçn file (·∫£nh ho·∫∑c video)
file_path = filedialog.askopenfilename(
    title="Ch·ªçn ·∫£nh ho·∫∑c video ƒë·ªÉ d·ª± ƒëo√°n",
    filetypes=[
        ("Media files", "*.jpg *.jpeg *.png *.webp *.bmp *.mp4 *.avi *.mov *.mkv"),
        ("Image files", "*.jpg *.jpeg *.png *.webp *.bmp"),
        ("Video files", "*.mp4 *.avi *.mov *.mkv"),
    ]
)

if not file_path:
    print("‚ùå Kh√¥ng ch·ªçn file n√†o!")
    exit()

print("üì∏ File ƒë√£ ch·ªçn:", file_path)

# N·∫øu l√† file ·∫£nh .webp ‚Üí chuy·ªÉn sang JPEG
if file_path.lower().endswith(".webp"):
    converted_path = os.path.splitext(file_path)[0] + "_temp.jpg"
    Image.open(file_path).convert("RGB").save(converted_path, "JPEG")
    file_path = converted_path

# Load model
model = YOLO("../models/tuan.pt")

# Th·ª±c hi·ªán tracking
results = model.track(
    source=file_path,
    conf=0.3,
    save=True,
    show=True,
    tracker="bytetrack.yaml"
)

# Th∆∞ m·ª•c l∆∞u k·∫øt qu·∫£
save_dir = model.predictor.save_dir
print("‚úÖ D·ª± ƒëo√°n xong! K·∫øt qu·∫£ l∆∞u trong th∆∞ m·ª•c:", save_dir)

# N·∫øu l√† video ‚Üí convert AVI sang MP4
if file_path.lower().endswith((".mp4", ".avi", ".mov", ".mkv")):
    base_name = os.path.basename(file_path).rsplit('.', 1)[0]
    output_avi = os.path.join(save_dir, f"{base_name}.avi")
    output_mp4 = os.path.join(save_dir, f"{base_name}.mp4")

    if os.path.exists(output_avi):
        print("üé¨ ƒêang chuy·ªÉn AVI ‚Üí MP4 ...")
        try:
            clip = VideoFileClip(output_avi)
            clip.write_videofile(output_mp4, codec="libx264", audio=False)
            clip.close()
            os.remove(output_avi)  # X√≥a file AVI c≈© cho g·ªçn
            print("‚úÖ Video MP4 ƒë√£ l∆∞u t·∫°i:", output_mp4)
        except Exception as e:
            print("‚ö†Ô∏è L·ªói khi chuy·ªÉn sang MP4:", e)
    else:
        print("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y file AVI ƒë·ªÉ chuy·ªÉn.")
